// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20250309013855_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("C_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("C_id"), 1L, 1);

                    b.Property<string>("C_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("D_id")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("C_id");

                    b.HasIndex("D_id");

                    b.HasIndex("TermId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("D_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("D_id"), 1L, 1);

                    b.Property<string>("D_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("D_id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<int?>("CourseC_id")
                        .HasColumnType("int");

                    b.Property<int>("GraduationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("S_id")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("C_id");

                    b.HasIndex("CourseC_id");

                    b.HasIndex("GraduationPlanId");

                    b.HasIndex("GroupId");

                    b.HasIndex("S_id");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Domain.Entities.GraduationPlan", b =>
                {
                    b.Property<int>("GraduationPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GraduationPlanId"), 1L, 1);

                    b.Property<int>("D_id")
                        .HasColumnType("int");

                    b.Property<int>("RequiredCredits")
                        .HasColumnType("int");

                    b.Property<string>("g_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GraduationPlanId");

                    b.HasIndex("D_id")
                        .IsUnique();

                    b.ToTable("GraduationPlans");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("C_id");

                    b.HasIndex("LectureId");

                    b.HasIndex("SectionId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Entities.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("LectureEndTime")
                        .HasColumnType("time");

                    b.Property<string>("LectureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("LectureStartTime")
                        .HasColumnType("time");

                    b.HasKey("LectureId");

                    b.HasIndex("C_id");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Domain.Entities.Prerequisite", b =>
                {
                    b.Property<int>("PrerequisiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrerequisiteId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<double?>("MinimumGPA")
                        .HasColumnType("float");

                    b.Property<int?>("RequiredCourseId")
                        .HasColumnType("int");

                    b.HasKey("PrerequisiteId");

                    b.HasIndex("C_id");

                    b.HasIndex("RequiredCourseId");

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("Domain.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("sectionEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("sectionStartTime")
                        .HasColumnType("time");

                    b.HasKey("SectionId");

                    b.HasIndex("C_id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Domain.Entities.SelectedCourse", b =>
                {
                    b.Property<int>("SelectedCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SelectedCourseId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("S_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SelectionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SelectedCourseId");

                    b.HasIndex("C_id");

                    b.HasIndex("GroupId");

                    b.HasIndex("S_id");

                    b.ToTable("SelectedCourses");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<int>("S_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("S_id"), 1L, 1);

                    b.Property<string>("College")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("D_id")
                        .HasColumnType("int");

                    b.Property<double>("GPA")
                        .HasColumnType("float");

                    b.Property<int>("GraduationPlanId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGraduate")
                        .HasColumnType("bit");

                    b.Property<long>("PIN")
                        .HasColumnType("bigint");

                    b.Property<long>("Reg_no")
                        .HasColumnType("bigint");

                    b.Property<string>("S_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("TotalCreditAchievement")
                        .HasColumnType("int");

                    b.Property<bool>("isfired")
                        .HasColumnType("bit");

                    b.HasKey("S_id");

                    b.HasIndex("D_id");

                    b.HasIndex("GraduationPlanId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entities.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"), 1L, 1);

                    b.Property<int>("GraduationPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Term_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermId");

                    b.HasIndex("GraduationPlanId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Domain.Entities.Waitlist", b =>
                {
                    b.Property<int>("WaitlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaitlistId"), 1L, 1);

                    b.Property<int>("C_id")
                        .HasColumnType("int");

                    b.Property<int>("S_id")
                        .HasColumnType("int");

                    b.HasKey("WaitlistId");

                    b.HasIndex("C_id");

                    b.HasIndex("S_id");

                    b.ToTable("Waitlist");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("D_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Term", "Term")
                        .WithMany("Courses")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Course", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseC_id");

                    b.HasOne("Domain.Entities.GraduationPlan", "GraduationPlan")
                        .WithMany()
                        .HasForeignKey("GraduationPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("S_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("GraduationPlan");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.GraduationPlan", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithOne("GraduationPlan")
                        .HasForeignKey("Domain.Entities.GraduationPlan", "D_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecture");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.Entities.Lecture", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.Prerequisite", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Course", "RequiredCourse")
                        .WithMany()
                        .HasForeignKey("RequiredCourseId");

                    b.Navigation("Course");

                    b.Navigation("RequiredCourse");
                });

            modelBuilder.Entity("Domain.Entities.Section", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.SelectedCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("SelectedCourses")
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("SelectedCourses")
                        .HasForeignKey("S_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("D_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GraduationPlan", "GraduationPlan")
                        .WithMany("Students")
                        .HasForeignKey("GraduationPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("GraduationPlan");
                });

            modelBuilder.Entity("Domain.Entities.Term", b =>
                {
                    b.HasOne("Domain.Entities.GraduationPlan", "GraduationPlan")
                        .WithMany("Terms")
                        .HasForeignKey("GraduationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GraduationPlan");
                });

            modelBuilder.Entity("Domain.Entities.Waitlist", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("C_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("S_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Groups");

                    b.Navigation("Lectures");

                    b.Navigation("Prerequisites");

                    b.Navigation("Sections");

                    b.Navigation("SelectedCourses");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("GraduationPlan")
                        .IsRequired();

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.GraduationPlan", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("SelectedCourses");
                });

            modelBuilder.Entity("Domain.Entities.Term", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
